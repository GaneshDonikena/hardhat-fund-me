{
  "address": "0xf57c7376cdC8fb13E22257Fb2fe28569546cC970",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa58200dbc7f7f67eb48b46c9901318aa20f2574fcd50edee2f53a22e2edb045b",
  "receipt": {
    "to": null,
    "from": "0xD35275966F8a51c65B98d88e6380A7ceFA930c59",
    "contractAddress": "0xf57c7376cdC8fb13E22257Fb2fe28569546cC970",
    "transactionIndex": 12,
    "gasUsed": "1064130",
    "logsBloom": "0x
    "blockHash": "0xefd9d928acb8559f6907fea0782ba34b39751e4f07413275f0e1939279a0825e",
    "transactionHash": "0xa58200dbc7f7f67eb48b46c9901318aa20f2574fcd50edee2f53a22e2edb045b",
    "logs": [],
    "blockNumber": 10982820,
    "cumulativeGasUsed": "4849104",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 1,
  "solcInputHash": "78821d7ebbe1ea97799e4390c5973a2c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.0;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\nerror FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author Patrick Collins\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n    address private immutable i_owner;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    AggregatorV3Interface private priceFeed;\\n\\n    // Events (we have none!)\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeedAddress) {\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n        i_owner = msg.sender;\\n    }\\n\\n    /// @notice Funds our contract based on the ETH/USD price\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(address fundingAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x5820f7eb971e1b500d3702c99dc32e4dc5a21911a1b6d7b70ab1d9a56c6b2502\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    // call it get fiatConversionRate, since it assumes something about decimals\\n    // It wouldn't work for every aggregator\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x816bfc0d7085476448fbd75002e92b51d4498a9d9d5b7944044639b1cf8ebdc1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001368380380620013688339818101604052810190620000379190620000cd565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000147565b600081519050620000c7816200012d565b92915050565b600060208284031215620000e057600080fd5b6000620000f084828501620000b6565b91505092915050565b600062000106826200010d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200013881620000f9565b81146200014457600080fd5b50565b60805160601c6111e662000182600039600081816102c1015281816104a001528181610546015281816106d1015261091301526111e66000f3fe6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101285780639e87a5cd14610153578063b60d42881461017e578063be2693f014610188578063d7b4750c1461019257610086565b80630343fb251461008b5780630d8e6e2c146100c85780633ccfd60b146100f35780636b69a592146100fd575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610c02565b6101cf565b6040516100bf9190610dd2565b60405180910390f35b3480156100d457600080fd5b506100dd610218565b6040516100ea9190610dd2565b60405180910390f35b6100fb6102bf565b005b34801561010957600080fd5b50610112610535565b60405161011f9190610dd2565b60405180910390f35b34801561013457600080fd5b5061013d610542565b60405161014a9190610d7c565b60405180910390f35b34801561015f57600080fd5b5061016861056a565b6040516101759190610d97565b60405180910390f35b610186610594565b005b6101906106cf565b005b34801561019e57600080fd5b506101b960048036038101906101b49190610c2b565b6109a9565b6040516101c69190610d7c565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561028257600080fd5b505afa158015610296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ba9190610c54565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610344576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561041557600080828154811061038f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040d90611081565b915050610347565b50600067ffffffffffffffff811115610457577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104855781602001602082028036833780820191505090505b506000908051906020019061049b929190610af2565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104e290610d67565b60006040518083038185875af1925050503d806000811461051f576040519150601f19603f3d011682016040523d82523d6000602084013e610524565b606091505b505090508061053257600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006105d3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610a1690919063ffffffff16565b1015610614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060b90610db2565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106639190610e09565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610754576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156107d757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161078d575b5050505050905060005b8151811015610888576000828281518110610825577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061088090611081565b9150506107e1565b50600067ffffffffffffffff8111156108ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156108f85781602001602082028036833780820191505090505b506000908051906020019061090e929190610af2565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161095590610d67565b60006040518083038185875af1925050503d8060008114610992576040519150601f19603f3d011682016040523d82523d6000602084013e610997565b606091505b50509050806109a557600080fd5b5050565b60008082815481106109e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610a2283610a52565b90506000670de0b6b3a76400008583610a3b9190610fa7565b610a459190610e5f565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a9b57600080fd5b505afa158015610aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad39190610c7d565b5050509150506402540be40081610aea9190610e90565b915050919050565b828054828255906000526020600020908101928215610b6b579160200282015b82811115610b6a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b12565b5b509050610b789190610b7c565b5090565b5b80821115610b95576000816000905550600101610b7d565b5090565b600081359050610ba881611154565b92915050565b600081519050610bbd8161116b565b92915050565b600081359050610bd281611182565b92915050565b600081519050610be781611182565b92915050565b600081519050610bfc81611199565b92915050565b600060208284031215610c1457600080fd5b6000610c2284828501610b99565b91505092915050565b600060208284031215610c3d57600080fd5b6000610c4b84828501610bc3565b91505092915050565b600060208284031215610c6657600080fd5b6000610c7484828501610bd8565b91505092915050565b600080600080600060a08688031215610c9557600080fd5b6000610ca388828901610bed565b9550506020610cb488828901610bae565b9450506040610cc588828901610bd8565b9350506060610cd688828901610bd8565b9250506080610ce788828901610bed565b9150509295509295909350565b610cfd81611001565b82525050565b610d0c8161105d565b82525050565b6000610d1f601b83610df8565b9150610d2a82611128565b602082019050919050565b6000610d42600083610ded565b9150610d4d82611151565b600082019050919050565b610d618161103d565b82525050565b6000610d7282610d35565b9150819050919050565b6000602082019050610d916000830184610cf4565b92915050565b6000602082019050610dac6000830184610d03565b92915050565b60006020820190508181036000830152610dcb81610d12565b9050919050565b6000602082019050610de76000830184610d58565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610e148261103d565b9150610e1f8361103d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e5457610e536110ca565b5b828201905092915050565b6000610e6a8261103d565b9150610e758361103d565b925082610e8557610e846110f9565b5b828204905092915050565b6000610e9b82611013565b9150610ea683611013565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610ee557610ee46110ca565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610f2257610f216110ca565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610f5f57610f5e6110ca565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f9c57610f9b6110ca565b5b828202905092915050565b6000610fb28261103d565b9150610fbd8361103d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ff657610ff56110ca565b5b828202905092915050565b600061100c8261101d565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b60006110688261106f565b9050919050565b600061107a8261101d565b9050919050565b600061108c8261103d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110bf576110be6110ca565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b61115d81611001565b811461116857600080fd5b50565b61117481611013565b811461117f57600080fd5b50565b61118b8161103d565b811461119657600080fd5b50565b6111a281611047565b81146111ad57600080fd5b5056fea26469706673582212208237d6541e0b895e26e07aec756ef5aea41a37c68f49495ce93839939839e9d264736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e8146101285780639e87a5cd14610153578063b60d42881461017e578063be2693f014610188578063d7b4750c1461019257610086565b80630343fb251461008b5780630d8e6e2c146100c85780633ccfd60b146100f35780636b69a592146100fd575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610c02565b6101cf565b6040516100bf9190610dd2565b60405180910390f35b3480156100d457600080fd5b506100dd610218565b6040516100ea9190610dd2565b60405180910390f35b6100fb6102bf565b005b34801561010957600080fd5b50610112610535565b60405161011f9190610dd2565b60405180910390f35b34801561013457600080fd5b5061013d610542565b60405161014a9190610d7c565b60405180910390f35b34801561015f57600080fd5b5061016861056a565b6040516101759190610d97565b60405180910390f35b610186610594565b005b6101906106cf565b005b34801561019e57600080fd5b506101b960048036038101906101b49190610c2b565b6109a9565b6040516101c69190610d7c565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561028257600080fd5b505afa158015610296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ba9190610c54565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610344576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561041557600080828154811061038f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040d90611081565b915050610347565b50600067ffffffffffffffff811115610457577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104855781602001602082028036833780820191505090505b506000908051906020019061049b929190610af2565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104e290610d67565b60006040518083038185875af1925050503d806000811461051f576040519150601f19603f3d011682016040523d82523d6000602084013e610524565b606091505b505090508061053257600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006105d3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610a1690919063ffffffff16565b1015610614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060b90610db2565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106639190610e09565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610754576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156107d757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161078d575b5050505050905060005b8151811015610888576000828281518110610825577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061088090611081565b9150506107e1565b50600067ffffffffffffffff8111156108ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156108f85781602001602082028036833780820191505090505b506000908051906020019061090e929190610af2565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161095590610d67565b60006040518083038185875af1925050503d8060008114610992576040519150601f19603f3d011682016040523d82523d6000602084013e610997565b606091505b50509050806109a557600080fd5b5050565b60008082815481106109e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610a2283610a52565b90506000670de0b6b3a76400008583610a3b9190610fa7565b610a459190610e5f565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a9b57600080fd5b505afa158015610aaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad39190610c7d565b5050509150506402540be40081610aea9190610e90565b915050919050565b828054828255906000526020600020908101928215610b6b579160200282015b82811115610b6a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b12565b5b509050610b789190610b7c565b5090565b5b80821115610b95576000816000905550600101610b7d565b5090565b600081359050610ba881611154565b92915050565b600081519050610bbd8161116b565b92915050565b600081359050610bd281611182565b92915050565b600081519050610be781611182565b92915050565b600081519050610bfc81611199565b92915050565b600060208284031215610c1457600080fd5b6000610c2284828501610b99565b91505092915050565b600060208284031215610c3d57600080fd5b6000610c4b84828501610bc3565b91505092915050565b600060208284031215610c6657600080fd5b6000610c7484828501610bd8565b91505092915050565b600080600080600060a08688031215610c9557600080fd5b6000610ca388828901610bed565b9550506020610cb488828901610bae565b9450506040610cc588828901610bd8565b9350506060610cd688828901610bd8565b9250506080610ce788828901610bed565b9150509295509295909350565b610cfd81611001565b82525050565b610d0c8161105d565b82525050565b6000610d1f601b83610df8565b9150610d2a82611128565b602082019050919050565b6000610d42600083610ded565b9150610d4d82611151565b600082019050919050565b610d618161103d565b82525050565b6000610d7282610d35565b9150819050919050565b6000602082019050610d916000830184610cf4565b92915050565b6000602082019050610dac6000830184610d03565b92915050565b60006020820190508181036000830152610dcb81610d12565b9050919050565b6000602082019050610de76000830184610d58565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610e148261103d565b9150610e1f8361103d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e5457610e536110ca565b5b828201905092915050565b6000610e6a8261103d565b9150610e758361103d565b925082610e8557610e846110f9565b5b828204905092915050565b6000610e9b82611013565b9150610ea683611013565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610ee557610ee46110ca565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610f2257610f216110ca565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610f5f57610f5e6110ca565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610f9c57610f9b6110ca565b5b828202905092915050565b6000610fb28261103d565b9150610fbd8361103d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ff657610ff56110ca565b5b828202905092915050565b600061100c8261101d565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b60006110688261106f565b9050919050565b600061107a8261101d565b9050919050565b600061108c8261103d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110bf576110be6110ca565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b61115d81611001565b811461116857600080fd5b50565b61117481611013565b811461117f57600080fd5b50565b61118b8161103d565b811461119657600080fd5b50565b6111a281611047565b81146111ad57600080fd5b5056fea26469706673582212208237d6541e0b895e26e07aec756ef5aea41a37c68f49495ce93839939839e9d264736f6c63430008040033",
  "devdoc": {
    "author": "Patrick Collins",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}